# -*- coding: utf-8 -*-
"""loggindetector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wTwD_h6o-faz2YNaDFuRMFRG0vV1rLKS
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install rasterio
import rasterio

### extracting the lat/long coordinates for pixels with deforestation
sentinel2dec = rasterio.open('/content/drive/MyDrive/sen2amazon/sen2amazontest.tif')
sentinel2jan = rasterio.open('/content/drive/MyDrive/sen2amazon/sen2amazontest-jan.tif')

sen2decband = sentinel2dec.read()
print(sen2decband.shape)

sen2janband = sentinel2jan.read()
print(sen2janband.shape)



import numpy as np
sen2decband2 = np.nan_to_num(sen2decband)
sen2janband2 = np.nan_to_num(sen2janband)

print(sen2decband2.shape)
x, y, z = (sen2decband2.shape)
print(sen2decband2[0][0].shape)
print (x,y,z)

n = 0
csvlistsen1dec = []
csvlistsen2dec = []


csvlistsen1jan = []
csvlistsen2jan = []


for sen2drow in range (0, z,3):

  for sen2dcol in range (0, y,3):

    if (sen2drow>=3 and sen2dcol>=3):
      sen2dec3x3 = sen2decband[:, sen2drow-1:sen2drow+2, sen2dcol -1:sen2dcol +2]
      sen2jan3x3 = sen2janband[:, sen2drow-1:sen2drow+2, sen2dcol -1:sen2dcol +2]


      rowvalssen2dec = []
      rowvalssen2jan = []


      for e in range (0, x):

          avgvalsen2j = 0
          avgvalsen2d = 0
          for c in range(3):
              for d in range(3):
                  if sen2dec3x3.shape[1] > 0 and sen2dec3x3.shape[2] > 0:
                      avgvalsen2d += sen2dec3x3[e, c, d]
                      avgvalsen2j += sen2jan3x3[e, c, d]
          rowvalssen2dec.append(avgvalsen2d / 9)
          rowvalssen2jan.append(avgvalsen2d / 9)

      csvlistsen2dec.append(rowvalssen2dec)
      csvlistsen2jan.append(rowvalssen2jan)

print(len(csvlistsen1dec))

print(np.shape(csvlistsen1dec))
print(np.shape(csvlistsen1jan))
print(np.shape(csvlistsen2dec))
print(np.shape(csvlistsen2jan))

## csv file
import csv

with open('output.csv', 'w', newline='') as file:
  writer = csv.writer(file)

csvnddecsen2 = np.asarray(csvlistsen2dec)
csvndjansen2 = np.asarray(csvlistsen2jan)
print(csvnddecsen2.shape)
print(csvndjansen2.shape)

s2_bands = ['B2', 'B3', 'B4','B5', 'B6', 'B7', 'B8', 'B8A', 'B11', 'B12']


s2_bands_all = [b + "dec" for b in s2_bands] + [b + "jan" for b in s2_bands]

combinedsen2 = np.concatenate([csvnddecsen2, csvndjansen2], axis=1)
combinedsen2 = np.vstack((s2_bands_all, combinedsen2 ))
print(combinedsen2.shape)



### sentinel 1 model xgb boost

import xgboost as xgb
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score

import matplotlib.pyplot as plt

data = pd.read_csv("/content/drive/MyDrive/sent2x2.csv")
data2 = pd.DataFrame(combinedsen2, columns=combinedsen2[0])
data2 = data2.apply(pd.to_numeric, errors='coerce')

print(data2.columns)
print(data2.shape)

data["NDVI_dec"] = (data["B8dec"] - data["B4dec"])  / (data["B8dec"] + data["B4dec"])
data["NDVI_jan"] = (data["B8jan"] - data["B4jan"])  / (data["B8jan"] + data["B4jan"])


data2["NDVI_dec"] = (data2["B8dec"] - data2["B4dec"])  / (data2["B8dec"] + data2["B4dec"])
data2["NDVI_jan"] = (data2["B8jan"] - data2["B4jan"])  / (data2["B8jan"] + data2["B4jan"])

print(data.head())

X_train = data.iloc[:, 1:]
y_train = data.iloc[:, 0]

X_test = data2

dtrain = xgb.DMatrix(X_train, label=y_train)
dtest = xgb.DMatrix(X_test)

params = {
    'max_depth': 7,
    'eta': 0.1,
    'objective': 'binary:logistic',
    'eval_metric': 'logloss',
    'seed': 42,
}

model = xgb.train(params, dtrain, num_boost_round=100)
y_pred = model.predict(dtest)
y_pred = np.round(y_pred)

import seaborn as sns
import rasterio



dims, nrows, ncols = sen2decband.shape
y_pred = np.reshape(y_pred[1:], (int(nrows/3 ), int(ncols/3 )))

colors = ['#CAEABD', '#F8E35C' , '#F85C5C']
# Generate a heatmap of predictions for each pixel in the testing dataset
sns.heatmap(y_pred, cmap=colors)

# Save the heatmap to a PNG file
plt.savefig('heatmap.png')

accuracy = None
f1 = None
precision = None
recall = None
print("Predictions saved to 'heatmap.png'")



print(sen2decband.shape)



