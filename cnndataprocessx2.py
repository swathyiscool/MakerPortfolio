# -*- coding: utf-8 -*-
"""cnndataprocessx2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mud2ysv7byaeJSy6Md-vcKWEYpxp_jyO
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install rasterio
 import rasterio
 from google.colab import drive


gfc = rasterio.open('/content/drive/MyDrive/Hansen_GFC-2021-v1.9_lossyear_00N_070W.tif')

arr = gfc.read(1)
arr.shape

gfc.bounds

import numpy as np

tile = arr[0:2000, 0:2000]
print(tile.shape[0])
maxfound = 0

for x in range(0, 40000,2000):
  for y in range(0, 40000,2000):
    sampletile = arr[x:x+2000, y:y+2000]
    unique, counts = np.unique(sampletile, return_counts=True)
    for i in range(1,unique.size):

      if (counts[i]) > maxfound:
        maxfound = counts[i]
        print(i, x, x+2000, y, y+2000,maxfound)

maxtile = arr[34000:36000, 28000:30000]

# Compute all the unique values in "tile". For each unique
# value, print how many pixels it appears in
unique, counts = np.unique(maxtile, return_counts=True)
print(unique)
print(counts)

maxtile.shape

band1 = gfc.read()
band1.shape

print (gfc.xy(34000,28000))
print (gfc.xy(36000,30000))

print(gfc.bounds)
print (sentinel1dec.bounds)
print(sentinel1dec.bounds)
print(sentinel2jan2.bounds)

### extracting the lat/long coordinates for pixels with deforestation
sentinel2dec = rasterio.open('/content/drive/MyDrive/sen2amazondec/sen2amazondec2-10.tif')
sentinel1dec = rasterio.open('/content/drive/MyDrive/sen1amazon/sen1amazondec2-10.tif')
sentinel1jan = rasterio.open('/content/drive/MyDrive/sen1amazon/sen1amazonjan2-10.tif')
sentinel2jan = rasterio.open('/content/drive/MyDrive/sen2amazondec/sen2amazonjan2-10.tif')

### extracting the lat/long coordinates for pixels with deforestation
sentinel2dec2 = rasterio.open('/content/drive/MyDrive/sen2amazon/sen2amazon2-8.tif')
sentinel1dec2 = rasterio.open('/content/drive/MyDrive/sen1amazon/sen1amazondec2-7.tif')
sentinel1jan2 = rasterio.open('/content/drive/MyDrive/sen1amazon/sen1amazonjan2-7.tif')
sentinel2jan2 = rasterio.open('/content/drive/MyDrive/sen2amazon/sen2amazonjan2-8.tif')

print("****")
print(gfc.bounds)
print(gfc.crs)
print(gfc.width)
print(gfc.height)
print(gfc.indexes)
print(gfc.res)

maxtile = arr[36000:38000, 16000:18000]
print(maxtile.shape)
datalat = []
datalong = []

stableforestlat = []
stableforestlong = []

datalat2 = []
datalong2 = []

stableforestlat2 = []
stableforestlong2 = []

for y in range (34000, 36000,4):
  for x in range (28000, 30000,4):

      n = arr[y-1: y+1 , x-1:x+1]
      counts = 0


      for a in range (0, 2):
        for b in range (0, 2):
          if n[a][b] == 21:
            counts += 1
      if (x%13 == 0 and counts < 3):
        row_idx, col_idx = gfc.xy(y,x)
        stableforestlong.append(row_idx)
        stableforestlat.append(col_idx)

      if counts >= 3:
        row_idx, col_idx = gfc.xy(y,x)
        datalong.append(row_idx)
        datalat.append(col_idx)


for y in range (36000, 38000,4):
  for x in range (16000, 18000,4):

      n = arr[y-1: y+1 , x-1:x+1]
      counts = 0


      for a in range (0, 2):
        for b in range (0, 2):
          if n[a][b] == 21:
            counts += 1
      if (x%13 == 0 and counts < 3):
        row_idx, col_idx = gfc.xy(y,x)
        stableforestlong2.append(row_idx)
        stableforestlat2.append(col_idx)

      if counts >= 3:
        row_idx, col_idx = gfc.xy(y,x)
        datalong2.append(row_idx)
        datalat2.append(col_idx)

print(len(datalat))
print(len(datalong))

print(len(stableforestlat))
print(len(stableforestlong))


print(len(datalat2))
print(len(stableforestlong2))

sen2decband = sentinel2dec.read()
print(sen2decband.shape)

sen2janband = sentinel2jan.read()
print(sen2janband.shape)

sen1decband = sentinel1dec.read()
print(sen1decband.shape)

sen1janband = sentinel1jan.read()
print(sen1janband.shape)

sen2decband2 = sentinel2dec2.read()
print(sen2decband2.shape)

sen2janband2 = sentinel2jan2.read()
print(sen2janband2.shape)

sen1decband2 = sentinel1dec2.read()
print(sen1decband2.shape)

sen1janband2 = sentinel1jan2.read()
print(sen1janband2.shape)

import numpy as np
sen2decband = np.nan_to_num(sen2decband)
sen2janband = np.nan_to_num(sen2janband)

sen1decband = np.nan_to_num(sen1decband)
sen1janband = np.nan_to_num(sen1janband)

sen2decband2 = np.nan_to_num(sen2decband2)
sen2janband2 = np.nan_to_num(sen2janband2)

sen1decband2 = np.nan_to_num(sen1decband2)
sen1janband2 = np.nan_to_num(sen1janband2)

##### sentinel 1 averages and 2 averages logged
print(datalong[1:])
print(datalat[1:])

n = 0
csvlistsen1dec = []
csvlistsen2dec = []


csvlistsen1jan = []
csvlistsen2jan = []
labels = []

for b in range (0, len(datalong)):

    sen1drow = (sentinel1dec.bounds.top - datalat[b]) / sentinel1dec.res[0]
    sen1dcol = (datalong[b] - sentinel1dec.bounds.left) / sentinel1dec.res[1]
    sen1drow = int(sen1drow)
    sen1dcol = int(sen1dcol)

    sen2drow = (sentinel2dec.bounds.top - datalat[b]) / sentinel2dec.res[0]
    sen2dcol = (datalong[b] - sentinel2dec.bounds.left) / sentinel2dec.res[1]
    sen2drow = int(sen1drow)
    sen2dcol = int(sen1dcol)

    sen1jrow = (sentinel1dec.bounds.top - datalat[b]) / sentinel1dec.res[0]
    sen1jcol = (datalong[b] - sentinel1dec.bounds.left) / sentinel1dec.res[1]
    sen1jrow = int(sen1drow)
    sen1jcol = int(sen1jcol)

    sen2jrow = (sentinel2dec.bounds.top - datalat[b]) / sentinel2dec.res[0]
    sen2jcol = (datalong[b] - sentinel2dec.bounds.left) / sentinel2dec.res[1]
    sen2jrow = int(sen1drow)
    sen2jcol = int(sen1jcol)

    if (sen1drow>=1 and sen1dcol>=1):
      sen1dec3x3 = sen1decband[:, sen1drow-5:sen1drow+5,  sen1dcol-5:sen1dcol+5];
      sen1jan3x3 = sen1janband[:, sen1jrow-5:sen1jrow+5,  sen1jcol-5:sen1jcol+5];

      sen2dec3x3 = sen2decband[:, sen2drow-5:sen2drow+5,  sen2dcol-5:sen2dcol+5];
      sen2jan3x3 = sen2janband[:, sen2jrow-5:sen2jrow+5,  sen2jcol-5:sen2jcol+5]

      labels.append(1)
      csvlistsen1dec.append(sen1dec3x3)
      csvlistsen1jan.append(sen1jan3x3)
      csvlistsen2dec.append(sen2dec3x3)
      csvlistsen2jan.append(sen2jan3x3)

print(len(csvlistsen1dec))
print(len(datalong2))

##### sentinel 1 averages and 2 averages logged
print(datalong[1:])
print(datalat[1:])

n = 0

print(len(datalong2))
for b in range (0, len(datalong2)):

    sen1drow = (sentinel1dec2.bounds.top - datalat2[b]) / sentinel1dec.res[0]
    sen1dcol = (datalong2[b] - sentinel1dec2.bounds.left) / sentinel1dec.res[1]
    sen1drow = int(sen1drow)
    sen1dcol = int(sen1dcol)

    sen2drow = (sentinel2dec2.bounds.top - datalat2[b]) / sentinel2dec.res[0]
    sen2dcol = (datalong2[b] - sentinel2dec2.bounds.left) / sentinel2dec.res[1]
    sen2drow = int(sen1drow)
    sen2dcol = int(sen1dcol)

    sen1jrow = (sentinel1dec2.bounds.top - datalat2[b]) / sentinel1dec.res[0]
    sen1jcol = (datalong2[b] - sentinel1dec2.bounds.left) / sentinel1dec.res[1]
    sen1jrow = int(sen1drow)
    sen1jcol = int(sen1jcol)

    sen2jrow = (sentinel2dec2.bounds.top - datalat2[b]) / sentinel2dec.res[0]
    sen2jcol = (datalong2[b] - sentinel2dec2.bounds.left) / sentinel2dec.res[1]
    sen2jrow = int(sen1drow)
    sen2jcol = int(sen1jcol)

    if (sen1drow>=1 and sen1dcol>=1):
      sen1dec3x3 = sen1decband2[:, sen1drow-5:sen1drow+5,  sen1dcol-5:sen1dcol+5];
      sen1jan3x3 = sen1janband2[:, sen1jrow-5:sen1jrow+5,  sen1jcol-5:sen1jcol+5];

      sen2dec3x3 = sen2decband2[:, sen2drow-5:sen2drow+5,  sen2dcol-5:sen2dcol+5];
      sen2jan3x3 = sen2janband2[:, sen2jrow-5:sen2jrow+5,  sen2jcol-5:sen2jcol+5]

      labels.append(1)
      csvlistsen1dec.append(sen1dec3x3)
      csvlistsen1jan.append(sen1jan3x3)
      csvlistsen2dec.append(sen2dec3x3)
      csvlistsen2jan.append(sen2jan3x3)



print(len(csvlistsen1dec))
print(len(csvlistsen2dec))

##### sentinel 1 averages and 2 averages stable
print(datalong[1:])
print(datalat[1:])

n = 0


for b in range (0, len(stableforestlat2)):

    sen1drow = (sentinel1dec2.bounds.top - stableforestlat2[b]) / sentinel1dec.res[0]
    sen1dcol = (stableforestlong2[b] - sentinel1dec2.bounds.left) / sentinel1dec.res[1]
    sen1drow = int(sen1drow)
    sen1dcol = int(sen1dcol)

    sen2drow = (sentinel2dec2.bounds.top - stableforestlat2[b]) / sentinel2dec.res[0]
    sen2dcol = (stableforestlong2[b] - sentinel2dec2.bounds.left) / sentinel2dec.res[1]
    sen2drow = int(sen1drow)
    sen2dcol = int(sen1dcol)

    sen1jrow = (sentinel1dec2.bounds.top - stableforestlat2[b]) / sentinel1dec.res[0]
    sen1jcol = (stableforestlong2[b] - sentinel1dec2.bounds.left) / sentinel1dec.res[1]
    sen1jrow = int(sen1drow)
    sen1jcol = int(sen1jcol)

    sen2jrow = (sentinel2dec2.bounds.top - stableforestlat2[b]) / sentinel2dec.res[0]
    sen2jcol = (stableforestlong2[b] - sentinel2dec2.bounds.left) / sentinel2dec.res[1]
    sen2jrow = int(sen1drow)
    sen2jcol = int(sen1jcol)



    if (sen1drow>=1 and sen1dcol>=1):
      sen1dec3x3 = sen1decband2[:, sen1drow-5:sen1drow+5,  sen1dcol-5:sen1dcol+5];
      sen1jan3x3 = sen1janband2[:, sen1jrow-5:sen1jrow+5,  sen1jcol-5:sen1jcol+5];

      sen2dec3x3 = sen2decband2[:, sen2drow-5:sen2drow+5,  sen2dcol-5:sen2dcol+5];
      sen2jan3x3 = sen2janband2[:, sen2jrow-5:sen2jrow+5,  sen2jcol-5:sen2jcol+5]

      labels.append(0)
      csvlistsen1dec.append(sen1dec3x3)
      csvlistsen1jan.append(sen1jan3x3)
      csvlistsen2dec.append(sen2dec3x3)
      csvlistsen2jan.append(sen2jan3x3)

##### sentinel 1 averages and 2 averages stable
print(datalong[1:])
print(datalat[1:])

n = 0


for b in range (0, len(stableforestlat)):

    sen1drow = (sentinel1dec.bounds.top - stableforestlat[b]) / sentinel1dec.res[0]
    sen1dcol = (stableforestlong[b] - sentinel1dec.bounds.left) / sentinel1dec.res[1]
    sen1drow = int(sen1drow)
    sen1dcol = int(sen1dcol)

    sen2drow = (sentinel2dec.bounds.top - stableforestlat[b]) / sentinel2dec.res[0]
    sen2dcol = (stableforestlong[b] - sentinel2dec.bounds.left) / sentinel2dec.res[1]
    sen2drow = int(sen1drow)
    sen2dcol = int(sen1dcol)

    sen1jrow = (sentinel1dec.bounds.top - stableforestlat[b]) / sentinel1dec.res[0]
    sen1jcol = (stableforestlong[b] - sentinel1dec.bounds.left) / sentinel1dec.res[1]
    sen1jrow = int(sen1drow)
    sen1jcol = int(sen1jcol)

    sen2jrow = (sentinel2dec.bounds.top - stableforestlat[b]) / sentinel2dec.res[0]
    sen2jcol = (stableforestlong[b] - sentinel2dec.bounds.left) / sentinel2dec.res[1]
    sen2jrow = int(sen1drow)
    sen2jcol = int(sen1jcol)
    ##### sentinel 1 averages and 2 averages stable


    if (sen1drow>=1 and sen1dcol>=1):
      sen1dec3x3 = sen1decband[:, sen1drow-5:sen1drow+5,  sen1dcol-5:sen1dcol+5];
      sen1jan3x3 = sen1janband[:, sen1jrow-5:sen1jrow+5,  sen1jcol-5:sen1jcol+5];

      sen2dec3x3 = sen2decband[:, sen2drow-5:sen2drow+5,  sen2dcol-5:sen2dcol+5];
      sen2jan3x3 = sen2janband[:, sen2jrow-5:sen2jrow+5,  sen2jcol-5:sen2jcol+5]

      labels.append(0)
      csvlistsen1dec.append(sen1dec3x3)
      csvlistsen1jan.append(sen1jan3x3)
      csvlistsen2dec.append(sen2dec3x3)
      csvlistsen2jan.append(sen2jan3x3)

print(np.asarray(csvlistsen1jan).shape)
print(np.asarray(csvlistsen2jan).shape)
print(len(labels))

csvnddec = np.asarray(csvlistsen1dec)
csvndjan = np.asarray(csvlistsen1jan)


csvnddecsen2 = np.asarray(csvlistsen2dec)
csvndjansen2 = np.asarray(csvlistsen2jan)


print(csvndjan.shape)
print(csvnddec.shape)
combinedsen1 = np.concatenate([csvnddec, csvndjan], axis=1)

combinedsen2 = np.concatenate([csvnddecsen2, csvndjansen2], axis=1)
combinedsen2andsen1 = np.concatenate([combinedsen2, combinedsen1], axis=1)

print(csvndjan.shape)
print(csvnddec.shape)
print(combinedsen1.shape)
print(combinedsen2.shape)
print(combinedsen2andsen1.shape)

print(combinedsen2andsen1[0,0])

# save numpy array as npy file
from numpy import asarray
from numpy import save
# define data
# save to npy file
save('/content/drive/MyDrive/datasen2.npy', combinedsen2)
save('/content/drive/MyDrive/datasen1.npy', combinedsen1)


labelsfile = "/content/drive/MyDrive/labelssen1.csv"
labelsfile2 = "/content/drive/MyDrive/labelssen2.csv"

import pandas as pd
df = pd.DataFrame(labels)
df.to_csv(labelsfile)


# define data
# save to npy file
save('/content/drive/MyDrive/datasen2sen1.npy', combinedsen2andsen1)

print(csvlistsen1jan)

csvnddec = np.asarray(csvlistsen1dec)
csvndjan = np.asarray(csvlistsen1jan)
csvndjan = csvndjan[:, 1:]

csvnddecsen2 = np.asarray(csvlistsen2dec)
csvndjansen2 = np.asarray(csvlistsen2jan)
csvndjansen2 = csvndjansen2[:, 1:]

print(csvndjan.shape)
print(csvnddec.shape)
combinedsen1 = np.concatenate([csvnddec, csvndjan], axis=1)

combinedsen2 = np.concatenate([csvnddecsen2, csvndjansen2], axis=1)
combinedsen2andsen1 = np.concatenate([combinedsen2, combinedsen1[:, 1:]], axis=1)

print(csvndjan.shape)
print(csvnddec.shape)
print(combinedsen1.shape)
print(combinedsen2.shape)
print(combinedsen2andsen1.shape)

csvnddec = np.asarray(csvlistsen1dec)
csvndjan = np.asarray(csvlistsen1jan)


print(csvndjan.shape)
print(csvnddec.shape)

import csv

s2_bands = ['B2', 'B3', 'B4','B5', 'B6', 'B7', 'B8', 'B8A', 'B11', 'B12']

s1_bands = ['VV', 'VH']

s1_bands_all = ['classifcation'] + [b + "dec" for b in s1_bands] + [b + "jan" for b in s1_bands]

s2_bands_all = ['classifcation'] + [b + "dec" for b in s2_bands] + [b + "jan" for b in s2_bands]

combinedfields = s1_bands_all + s2_bands_all[1:]
fieldssen1 = ['classification', 'VVdec', 'VHdec', 'VVjan', 'VHjan']
filenamesen1 = "/content/drive/MyDrive/sen1x2.csv"
filenamesen2 = "/content/drive/MyDrive/sent2x2.csv"
filenamesen2sen1 = "/content/drive/MyDrive/sen1sen2x2.csv"

f = open(filenamesen1, "w")
f.truncate()
f.close()


f = open(filenamesen2, "w")
f.truncate()
f.close()

f = open(filenamesen2sen1, "w")
f.truncate()
f.close()



with open(filenamesen1, 'w', newline='') as csvfilesen1:
    csvwriter1 = csv.writer(csvfilesen1)
    csvwriter1.writerow(fieldssen1)
    csvwriter1.writerows(combinedsen1)




with open(filenamesen2, 'w', newline='') as csvfilesen2:
    csvwriter2 = csv.writer(csvfilesen2)
    csvwriter2.writerow(s2_bands_all)
    csvwriter2.writerows(combinedsen2)




with open(filenamesen2sen1, 'w', newline='') as csvfilesen2sen1:
    csvwriter3 = csv.writer(csvfilesen2sen1)
    csvwriter3.writerow(combinedfields)
    csvwriter3.writerows(combinedsen2andsen1)

print(sentinel1.res)
print(sentinel2dec.res)

